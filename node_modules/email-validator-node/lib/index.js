'use strict';

var dns = require('dns');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var range = require("node-range");
var isValidEmail = /^(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){255,})(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?)){65,}@)(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22))(?:\.(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\]))$/;
/**
 * Usage
 * var { isEmailValid } = require('email-validator-node')
 * await isEmailValid(String email);
 *
 * @param {String} email - The possible email input
 * @return {validateEmailResponse} true is the specified email is valid, false otherwise
 */
function checkEmail(email) {
    return __awaiter(this, void 0, void 0, function () {
        var isFormatValid;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, isEmailFormatValid(email)];
                case 1:
                    isFormatValid = _a.sent();
                    if (!isFormatValid) {
                        return [2 /*return*/, { isValid: false, message: "invalid-format" }];
                    }
                    if (isBlacklisted(email)) {
                        return [2 /*return*/, { isValid: false, message: "blacklist" }];
                    }
                    return [4 /*yield*/, isMXRecordValid(email)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
/**
 * Usage
 * var { isEmailFormatValid } = require('email-validator-node')
 * await isEmailFormatValid(String email);
 *
 * @param {String} email - The possible email input
 * @return {Boolean}
 */
function isEmailFormatValid(email) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!email)
                return [2 /*return*/, false];
            if (!email.length)
                return [2 /*return*/, false];
            if (typeof email !== "string")
                return [2 /*return*/, false];
            if (email && !isValidEmail.test(email.toLowerCase()))
                return [2 /*return*/, false];
            return [2 /*return*/, true];
        });
    });
}
function domainSuffixes(email) {
    var domainComponents = email.split("@")[1].split(".");
    return range(0, domainComponents.length).map(function (n) {
        return domainComponents.slice(n).join(".");
    });
}
/**
 * Usage
 * var { isBlacklisted } = require('email-validator-node')
 * await isBlacklisted(String email);
 *
 * @param {String} email - The possible email input
 * @return {Boolean}
 */
function isBlacklisted(email) {
    var blacklist = require("./blacklist.js");
    function suffixIsBlacklisted(domainSuffix) {
        return blacklist[domainSuffix];
    }
    return domainSuffixes(email).some(suffixIsBlacklisted);
}
/**
 * Usage
 * var { isMXRecordValid } = require('email-validator-node')
 * await isMXRecordValid(String email);
 *
 * @param {String} email - The possible email input
 * @return {validateEmailResponse} true is the specified email is valid, false otherwise
 */
function isMXRecordValid(email) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, domain;
        return __generator(this, function (_b) {
            _a = email.split("@"), _a[0], domain = _a[1];
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    try {
                        dns.resolveMx(domain, function (err, mx) {
                            if (typeof mx != "undefined") {
                                mx && mx.length
                                    ? resolve({ isValid: true, mxRecords: mx })
                                    : resolve({ isValid: false, mxRecords: null });
                            }
                            else if (err.code == "ENOTFOUND" || err.code == "ENODATA") {
                                resolve({ isValid: false, mxRecords: null, message: "not-found" });
                            }
                            else {
                                resolve({ isValid: false, mxRecords: null, message: "error" });
                            }
                        });
                    }
                    catch (error) {
                        resolve({ isValid: false, mxRecords: null, message: error.message });
                    }
                })];
        });
    });
}
module.exports = {
    checkEmail: checkEmail,
    isEmailFormatValid: isEmailFormatValid,
    isMXRecordValid: isMXRecordValid,
    isBlacklisted: isBlacklisted,
};
//# sourceMappingURL=index.js.map
